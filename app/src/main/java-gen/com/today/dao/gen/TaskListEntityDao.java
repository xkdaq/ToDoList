package com.today.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.today.dao.entity.TaskListEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_LIST_ENTITY".
*/
public class TaskListEntityDao extends AbstractDao<TaskListEntity, Long> {

    public static final String TABLENAME = "TASK_LIST_ENTITY";

    /**
     * Properties of entity TaskListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property T_id = new Property(0, Long.class, "t_id", true, "_id");
        public final static Property T_fid = new Property(1, Long.class, "t_fid", false, "T_FID");
        public final static Property T_title = new Property(2, String.class, "t_title", false, "T_TITLE");
        public final static Property T_content = new Property(3, String.class, "t_content", false, "T_CONTENT");
        public final static Property T_time = new Property(4, String.class, "t_time", false, "T_TIME");
        public final static Property T_createtime = new Property(5, String.class, "t_createtime", false, "T_CREATETIME");
        public final static Property T_type = new Property(6, String.class, "t_type", false, "T_TYPE");
    }


    public TaskListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_LIST_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: t_id
                "\"T_FID\" INTEGER," + // 1: t_fid
                "\"T_TITLE\" TEXT," + // 2: t_title
                "\"T_CONTENT\" TEXT," + // 3: t_content
                "\"T_TIME\" TEXT," + // 4: t_time
                "\"T_CREATETIME\" TEXT," + // 5: t_createtime
                "\"T_TYPE\" TEXT);"); // 6: t_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_LIST_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskListEntity entity) {
        stmt.clearBindings();
 
        Long t_id = entity.getT_id();
        if (t_id != null) {
            stmt.bindLong(1, t_id);
        }
 
        Long t_fid = entity.getT_fid();
        if (t_fid != null) {
            stmt.bindLong(2, t_fid);
        }
 
        String t_title = entity.getT_title();
        if (t_title != null) {
            stmt.bindString(3, t_title);
        }
 
        String t_content = entity.getT_content();
        if (t_content != null) {
            stmt.bindString(4, t_content);
        }
 
        String t_time = entity.getT_time();
        if (t_time != null) {
            stmt.bindString(5, t_time);
        }
 
        String t_createtime = entity.getT_createtime();
        if (t_createtime != null) {
            stmt.bindString(6, t_createtime);
        }
 
        String t_type = entity.getT_type();
        if (t_type != null) {
            stmt.bindString(7, t_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskListEntity entity) {
        stmt.clearBindings();
 
        Long t_id = entity.getT_id();
        if (t_id != null) {
            stmt.bindLong(1, t_id);
        }
 
        Long t_fid = entity.getT_fid();
        if (t_fid != null) {
            stmt.bindLong(2, t_fid);
        }
 
        String t_title = entity.getT_title();
        if (t_title != null) {
            stmt.bindString(3, t_title);
        }
 
        String t_content = entity.getT_content();
        if (t_content != null) {
            stmt.bindString(4, t_content);
        }
 
        String t_time = entity.getT_time();
        if (t_time != null) {
            stmt.bindString(5, t_time);
        }
 
        String t_createtime = entity.getT_createtime();
        if (t_createtime != null) {
            stmt.bindString(6, t_createtime);
        }
 
        String t_type = entity.getT_type();
        if (t_type != null) {
            stmt.bindString(7, t_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskListEntity readEntity(Cursor cursor, int offset) {
        TaskListEntity entity = new TaskListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // t_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // t_fid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // t_title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // t_content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // t_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // t_createtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // t_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskListEntity entity, int offset) {
        entity.setT_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setT_fid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setT_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setT_content(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setT_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setT_createtime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setT_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskListEntity entity, long rowId) {
        entity.setT_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskListEntity entity) {
        if(entity != null) {
            return entity.getT_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskListEntity entity) {
        return entity.getT_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
